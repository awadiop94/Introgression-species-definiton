# Author: Awa Diop adiop2@ncsu.edu
# Author: Louis-Marie Bobay ljbobay@ncsu.edu


# Snakefile_stage3
import yaml
import glob

# =============================
# HELPERS
# =============================
def get_ref_dirnames():
    with open("configref.yaml") as f:
        return yaml.safe_load(f).get("dirname", [])

def get_cand_dirnames(ref_cluster):
    with open("configcand.yaml") as f:
        cfg = yaml.safe_load(f)
    return cfg.get(ref_cluster, [])

# Build a list of valid (ref, cand) pairs directly from configs
VALID_PAIRS = [
    (ref, cand)
    for ref in get_ref_dirnames()
    for cand in get_cand_dirnames(ref)
    if ref != cand
]

# Function to extract the reference genome for each {ref}
def get_ref_genome(wildcards):
    path = f"GENOMES/Gene_Flow/ReferenceDatabase/{wildcards.ref}/path_to_genome_list.txt"
    with open(path, "r") as g:
        genome = g.read()
    return genome.split('\n', 1)[0]   # first line only


SAMPLES, = glob_wildcards("GENOMES/core_genome/core/{sample}.fa.align")
                    
# =============================
# TARGET
# =============================
rule stage3_all:
    input:
        "GENOMES/Gene_Flow/QueryDatabase/gene_flow_result_summary.txt",
        "GENOMES/ANI_results/BSCgenome_clusters.csv",
        "GENOMES/core_genome/filtered_introgression.txt",
        "GENOMES/core_genome/filtered_introgressionBSC.txt"

# =============================
# GENE FLOW ANALYSIS
# =============================
rule core_genome_between_species:
    input:
        genomes_dir = "GENOMES/genomes",
        conf = "configcand.yaml"
    output:
        fasta = "GENOMES/Gene_Flow/QueryDatabase/{ref}/{cand}/core_genome/concat.fa",
        family = "GENOMES/Gene_Flow/QueryDatabase/{ref}/{cand}/core_genome/families_core.txt"
    params:
        liste = "GENOMES/Gene_Flow/QueryDatabase/{ref}/{cand}/path_to_genome_list.txt",
        outdir = "GENOMES/Gene_Flow/QueryDatabase/{ref}/{cand}/core_genome",
        REF=get_ref_genome   # dynamically computed from {ref}
    threads: 8
    resources: mem_mb=32000
    shell:
        "python pipelines/CoreCruncher/corecruncher_master.py "
        "-in {input.genomes_dir} -out {params.outdir} -list {params.liste} -ref {params.REF} "
        "-freq 85 -prog usearch -ext .fa -length 80 -score 70 -align mafft"

rule gene_flow_refcandsp:
    input:
        fasta = "GENOMES/Gene_Flow/QueryDatabase/{ref}/{cand}/core_genome/concat.fa"
    output:
        pvcandref = "GENOMES/Gene_Flow/QueryDatabase/{ref}/{cand}/core_genome/double_test.txt"
    params:
        results_dir = "GENOMES/Gene_Flow/QueryDatabase/{ref}/{cand}/"
    threads: 8
    resources: mem_mb=32000
    shell:
        "python pipelines/ConSpecifix/Gene_Flow_between_QueryRefsp/analyze_gene_flow.py {params.results_dir}"

rule normalize_gene_flow_value:
    input:
        pvcandref = "GENOMES/Gene_Flow/QueryDatabase/{ref}/{cand}/core_genome/double_test.txt"
    output:
        done_flag = "GENOMES/Gene_Flow/QueryDatabase/{ref}/{cand}/core_genome/hmnorm_result.txt"
    params:
        dir = "GENOMES"
    threads: 2
    resources: mem_mb=4000
    shell:
        "python pipelines/ConSpecifix/Gene_Flow_between_QueryRefsp/summarize_geneflow.py {params.dir}"

rule collect_gene_flow_summary:
    input:
        lambda wildcards: [
            f"GENOMES/Gene_Flow/QueryDatabase/{ref}/{cand}/core_genome/hmnorm_result.txt"
            for ref, cand in VALID_PAIRS
        ]
    output:
        "GENOMES/Gene_Flow/QueryDatabase/gene_flow_result_summary.txt"
    threads: 1
    resources: mem_mb=2000
    run:
        if len(input) == 0:
            with open(output[0], "w") as out:
                out.write("")
        else:
            shell(f"head -n 1 {input[0]} > {output[0]}")
            shell(f"tail -q -n +2 {' '.join(input)} >> {output[0]}")

# =============================
# INTROGRESSION
# =============================
rule ANI_introgression:
    input:
        expand("GENOMES/core_genome/core/{sample}.fa.align", sample=SAMPLES)
    output:
        gene_trees = expand("GENOMES/core_genome/{outgroup}/{sample}.fa.align.tree",
                            outgroup=["outgroup1", "outgroup2"], sample=SAMPLES),
        intro = "GENOMES/core_genome/filtered_introgression.txt"
    params:
        dir = "GENOMES"
    threads: 8
    resources: mem_mb=32000
    shell:
        "python pipelines/Introgression/analyze_introgression.py {params.dir}"

rule BSCCluster:
    input:
        clusters = "GENOMES/ANI_results/genome_clusters.csv",
        gene_flow = "GENOMES/Gene_Flow/QueryDatabase/gene_flow_result_summary.txt"
    output:
        "GENOMES/ANI_results/BSCgenome_clusters.csv"
    params:
        dir = "GENOMES"
    threads: 1
    resources: mem_mb=2000
    shell:
        "python pipelines/ConSpecifix/Gene_Flow_between_QueryRefsp/BSCclustering.py {params.dir}"

rule BSC_introgression:
    input:
        "GENOMES/ANI_results/BSCgenome_clusters.csv"
    output:
        "GENOMES/core_genome/filtered_introgressionBSC.txt"
    params:
        dir = "GENOMES"
    threads: 4
    resources: mem_mb=8000
    shell:
        """
        python pipelines/Introgression/identify_BSCsp.py {params.dir}
        python pipelines/Introgression/reunite_verification_BSCsp.py {params.dir}
        """
